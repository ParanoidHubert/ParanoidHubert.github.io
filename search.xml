<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[架构的演进]]></title>
    <url>%2F2018%2F03%2F16%2F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B%2F</url>
    <content type="text"><![CDATA[想想自己在目前项目已经呆了1年半了，也经历并参与了一些架构调整，所以打算整理一下基本思路，因此该文档多为思路整理，只有自己练手的与工作无关的代码会贴上来。 最初的架构 用户门户（网站） 单体大应用后台（内部管理系统） 敏感数据EBS 会员数据siebel 在这简单的架构下运转着自己的业务，这时，我还未进入这个项目中 目前架构 用户门户 网站，app、微信企业号(coding) 前后端分离规划 单体大应用后台 按业务拆分为多个子应用(应用间通过api互相调用，后续引入oauth做接口认证) 再由一个入口应用接入各个子应用，感知上依然为单应用-尽量降低用户习惯影响 被子应用依赖的授权认证依赖包core（调用用户信息认证，接口token认证） 独立的用户信息应用（可手工增删改用户，但多为接口调用） 增加oauth-server，作为各个应用的token凭证分发 敏感数据EBS 会员数据sieble 中台门户 应用拆分（实现方式重构springCloud微服务架构coding） 刚进项目时(2016.08)由于了解得不多，也是个新人，这个情况下，当时我在各个子应用中流转，包括用户门户、后台子应用、会员中台门户等，然后后面也参与到了做前后端分离的支撑工作，独立oauth-server的开发工作，虽然授权认证依赖包core对于token的认证并非我完成，但后续也接手了，还有入口应用等。 微服务的架构 对于已被拆分的子应用间通过api调用，越来越多子应用互相间通过api的调用使得自应用间接口混乱不堪&gt;需要服务注册，并且高可用，然后就被告知了后续转型微服务，并引入devops工具链&amp;思想。 目前接触了下正在从sieble拆分的子应用实施springCloud微服务架构，其中也正在考虑用户信息在业务微服务中的传递问题，然后解决方案有： redis公共服务存放登录过的用户信息，key值为登录时生成的uuid，存放在cookie中（需要新增redis公共服务） &#x2714; 在网上看到的关于springCloud Security支持的token中继原理，将token附带在header中（需要集成oauth-server，用户服务 or 公共服务redis存放用户信息，集成springCloud Security） &#x2716; 最终因为项目工期的原因选择了方案1，但个人觉得方案2较为完整，可作为后续迭代 之前自己业余时间基于springCloud设想的微服务架构 &#x1F449; here 对于架构的演进看法 多为在网上整合别人的演进，并收录一些自己认可的方案 &#x1F449; 遗留系统的微服务改造 TODO]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>springCloud</tag>
        <tag>单体应用</tag>
        <tag>分布式</tag>
        <tag>前后端分离</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正向代理&反向代理]]></title>
    <url>%2F2018%2F03%2F14%2F%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[概述之前一直都是使用的(apache/nginx)反向代理做请求转发，前几天做微信企业号做单点认证时，调用微信api时，发现部分机器(uat)无法调用，了解后知道是内网策略原因，跨网段服务器之间需要开通防火墙，调用外网为统一的代理服务器，且需程序支持；于是便有想要深入了解下的想法 正向代理概念：是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。 反向代理概念：反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端。 正向代理与反向代理的区别 图侵删（图在v2ex上看到的） javaWeb下代理请求的支持123456789101112131415161718192021222324public SimpleClientHttpRequestFactory httpClientFactory() &#123; SimpleClientHttpRequestFactory httpRequestFactory = new SimpleClientHttpRequestFactory(); httpRequestFactory.setReadTimeout(wechatConfigProperties.getRestReadTimeout()); httpRequestFactory.setConnectTimeout(wechatConfigProperties.getRestConnectTimeout()); if(wechatConfigProperties.isEnabledProxy())&#123; SocketAddress address = new InetSocketAddress(wechatConfigProperties.getProxyHost(), wechatConfigProperties.getProxyPort()); Proxy proxy = new Proxy(Proxy.Type.HTTP, address); httpRequestFactory.setProxy(proxy); &#125; return httpRequestFactory; &#125; /** * 访问外网的代理，给特定情况下使用，不由spring管理 * @return * @author zhengxiaobin */public RestTemplate restTemplate()&#123; RestTemplate restTemplate = new RestTemplate(httpClientFactory()); return restTemplate; &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[渗透测试&解决方案]]></title>
    <url>%2F2018%2F03%2F07%2F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[渗透测试工具集Acunetix Web Vulnerability ScannerWeb安全评估系统 AppScanWeb安全评估系统 HttpWatch professional网页数据分析工具 Netcat端口连接工具 WireShark网络抓包工具 Nmap网络扫描探测工具 fiddlerWeb调试工具 Burpsuit渗透测试综合平台 &nbsp;&nbsp;&nbsp;&nbsp; 问题&amp;解决方案1. sql注入 问题描述：sql注入，模糊查询时keyWord存在sql注入风险 坑点：项目赶时间上线，在实现业务过程中，使用反射将sql类型为Class[]{String.class}接入Criteria中，再生成sql 拼接sql原理： 解决方案：更换为上图中的红色方框原理 代码展示 原拼接代码 12345678910111213141516171819202122232425/** * 通过反射调用Criteria的addCriterion方法 * @param target * @param where * @return */ public static Object addCondition(Object target, String where) &#123; Class clz = target.getClass(); try &#123; Method method = clz.getSuperclass().getDeclaredMethod (&quot;addCriterion&quot;, new Class[]&#123;String.class&#125;); method.setAccessible(true); method.invoke(target, new Object[]&#123;where&#125;); method.setAccessible(false); &#125; catch (NoSuchMethodException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; return target; &#125; 防sql注入拼接代码 1234567891011121314151617181920212223242526/** * * @param target * @param condition sql语句 * @param value 需要传入的值 * @param property 值的字段名称 * @return */ public static Object addCondition(Object target,String condition, Object value,String property) &#123; Class clz = target.getClass(); try &#123; Method method = clz.getSuperclass().getDeclaredMethod (&quot;addCriterion&quot;, new Class[]&#123;String.class,Object.class,String.class&#125;); method.setAccessible(true); method.invoke(target,condition, value, property); method.setAccessible(false); &#125; catch (NoSuchMethodException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; return target; &#125; &nbsp;&nbsp; 2.跨站脚本攻击XXS 问题描述：解决请求参数过滤，包括: Parameter、ParameterValues、Header body(坑点) 解决方案： 重写请求继承HttpServletRequestWrapper，重写各个参数部分的方法，再由JsoupUtil过滤掉xxs非法标签。 关于常规Parameter、ParameterValues、Header等的过滤比较简单，重写方法将参数逐个过滤。 关于body中的参数过滤。 坑点：body流读取一次后，在方法调用时已关闭 解决方案： 在构造方法中读取body流，并传递到外置参数中。 创建ByteArrayInputStream读取参数中保存的body流数据，重写getInputStream()方法，其中read()里把调用ByteArrayInputStream.read()返回。 代码展示XssHttpServletRequestWrapper 请求重写类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159/** * 重写请求,用于过滤掉xxs非法参数 * * @author zhengxiaobin */public class XssHttpServletRequestWrapper extends HttpServletRequestWrapper &#123; HttpServletRequest orgRequest = null; private boolean isIncludeRichText = true; //存放body,避免body流读取一次后，在方法调用时已关闭 private final String body; /** * Constructs a request object wrapping the given request. * * @param request The request to wrap * @throws IllegalArgumentException if the request is null */ public XssHttpServletRequestWrapper(HttpServletRequest request, boolean isIncludeRichText) &#123; super(request); orgRequest = request; this.isIncludeRichText = isIncludeRichText; StringBuilder stringBuilder = new StringBuilder(); BufferedReader bufferedReader = null; try &#123; InputStream inputStream = request.getInputStream(); if (inputStream != null) &#123; bufferedReader = new BufferedReader(new InputStreamReader(inputStream)); char[] charBuffer = new char[128]; int bytesRead = -1; while ((bytesRead = bufferedReader.read(charBuffer)) &gt; 0) &#123; stringBuilder.append(charBuffer, 0, bytesRead); &#125; &#125; else &#123; stringBuilder.append(&quot;&quot;); &#125; &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; finally &#123; if (bufferedReader != null) &#123; try &#123; bufferedReader.close(); &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; &#125; &#125; body = JsoupUtil.clean(stringBuilder.toString()); &#125; /** * 覆盖getParameter方法，将参数名和参数值都做xss过滤。&lt;br/&gt; * 如果需要获得原始的值，则通过super.getParameterValues(name)来获取&lt;br/&gt; * getParameterNames,getParameterValues和getParameterMap也可能需要覆盖 */ @Override public String getParameter(String name) &#123; Boolean flag = (&quot;content&quot;.equals(name) || name.endsWith(&quot;WithHtml&quot;)); if( flag &amp;&amp; !isIncludeRichText)&#123; return super.getParameter(name); &#125; name = JsoupUtil.clean(name); String value = super.getParameter(name); if (StringUtils.isNotBlank(value)) &#123; value = JsoupUtil.clean(value); &#125; return value; &#125; @Override public String[] getParameterValues(String name) &#123; String[] arr = super.getParameterValues(name); if(arr != null)&#123; for (int i=0;i&lt;arr.length;i++) &#123; arr[i] = JsoupUtil.clean(arr[i]); &#125; &#125; return arr; &#125; /** * 覆盖getHeader方法，将参数名和参数值都做xss过滤。&lt;br/&gt; * 如果需要获得原始的值，则通过super.getHeaders(name)来获取&lt;br/&gt; * getHeaderNames 也可能需要覆盖 */ @Override public String getHeader(String name) &#123; name = JsoupUtil.clean(name); String value = super.getHeader(name); if (StringUtils.isNotBlank(value)) &#123; value = JsoupUtil.clean(value); &#125; return value; &#125; /** * 获取最原始的request * @return */ public HttpServletRequest getOrgRequest() &#123; return orgRequest; &#125; /** * 获取最原始的request的静态方法 * @param req * @return */ public static HttpServletRequest getOrgRequest(HttpServletRequest req) &#123; if (req instanceof XssHttpServletRequestWrapper) &#123; return ((XssHttpServletRequestWrapper) req).getOrgRequest(); &#125; return req; &#125; @Override public ServletInputStream getInputStream() throws IOException &#123; //重新存放进去 final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body.getBytes()); ServletInputStream servletInputStream = new ServletInputStream() &#123; public int read() throws IOException &#123; return byteArrayInputStream.read(); &#125; @Override public boolean isFinished() &#123; // TODO Auto-generated method stub return false; &#125; @Override public boolean isReady() &#123; // TODO Auto-generated method stub return false; &#125; @Override public void setReadListener(ReadListener listener) &#123; // TODO Auto-generated method stub &#125; &#125;; return servletInputStream; &#125; @Override public BufferedReader getReader() throws IOException &#123; return new BufferedReader(new InputStreamReader(this.getInputStream())); &#125; public String getBody() &#123; return this.body; &#125;&#125; XSSFilter XXS过滤器1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374/** * 拦截防止xss注入 * 通过Jsoup过滤请求参数内的特定字符 * * @author zhengxiaobin */public class XSSFilter implements Filter &#123; private static final Logger logger = LoggerFactory.getLogger(XSSFilter.class); /** * 是否过滤富文本内容 */ private static boolean IS_INCLUDE_RICH_TEXT = true; public List&lt;String&gt; excludes = new ArrayList&lt;&gt;(); @Override public void init(FilterConfig filterConfig) throws ServletException &#123; if(logger.isDebugEnabled())&#123; logger.debug(&quot;xss filter init ====================&quot;); &#125; String isIncludeRichText = filterConfig.getInitParameter(&quot;isIncludeRichText&quot;); if(StringUtils.isNotBlank(isIncludeRichText))&#123; IS_INCLUDE_RICH_TEXT = BooleanUtils.toBoolean(isIncludeRichText); &#125; String temp = filterConfig.getInitParameter(&quot;excludes&quot;); if (temp != null) &#123; String[] url = temp.split(&quot;,&quot;); for (int i = 0; url != null &amp;&amp; i &lt; url.length; i++) &#123; excludes.add(url[i]); &#125; &#125; &#125; @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; if(logger.isDebugEnabled())&#123; logger.debug(&quot;xss filter is open&quot;); &#125; HttpServletRequest req = (HttpServletRequest) request; HttpServletResponse resp = (HttpServletResponse) response; if(handleExcludeURL(req, resp))&#123; chain.doFilter(request, response); return; &#125; //转换成过滤xxs的请求 XssHttpServletRequestWrapper xssRequest = new XssHttpServletRequestWrapper((HttpServletRequest) request,IS_INCLUDE_RICH_TEXT); chain.doFilter(xssRequest, response); &#125; @Override public void destroy() &#123; &#125; private boolean handleExcludeURL(HttpServletRequest request, HttpServletResponse response) &#123; if (excludes == null || excludes.isEmpty()) &#123; return false; &#125; String url = request.getServletPath(); for (String pattern : excludes) &#123; Pattern p = Pattern.compile(&quot;^&quot; + pattern); Matcher m = p.matcher(url); if (m.find()) &#123; return true; &#125; &#125; return false; &#125;&#125; JsoupUtil xss非法标签过滤工具类1234567891011121314151617181920212223242526272829303132333435363738/** * xss非法标签过滤工具类 * 过滤html中的xss字府 * * @author zhengxiaobin */public class JsoupUtil &#123; /** * 使用自带的basicWithImages 白名单 * 允许的便签有a,b,blockquote,br,cite,code,dd,dl,dt,em,i,li,ol,p,pre,q,small,span, * strike,strong,sub,sup,u,ul,img * 以及a标签的href,img标签的src,align,alt,height,width,title属性 */ private static final Whitelist whitelist = Whitelist.basicWithImages(); /** 配置过滤化参数,不对代码进行格式化 */ private static final Document.OutputSettings outputSettings = new Document.OutputSettings().prettyPrint(false); static &#123; // 富文本编辑时一些样式是使用style来进行实现的 // 比如红色字体 style=&quot;color:red;&quot; // 所以需要给所有标签添加style属性 whitelist.addAttributes(&quot;:all&quot;, &quot;style&quot;); &#125; public static String clean(String content) &#123; if(StringUtils.isNotBlank(content))&#123; content = content.trim(); &#125; return Jsoup.clean(content, &quot;&quot;, whitelist, outputSettings); &#125; public static void main(String[] args) throws IOException &#123; String text = &quot; &lt;a href=\&quot;http://www.baidu.com/a\&quot; onclick=\&quot;alert(1);\&quot;&gt;sss&lt;/a&gt;&lt;script&gt;alert(0);&lt;/script&gt;sss &quot;; System.out.println(clean(text)); &#125;&#125; 注册过滤器12345678910111213141516171819202122@Configurationpublic class XssConfig &#123; /** * 注册xxs过滤器 * @return */ @Bean public FilterRegistrationBean xssFilterRegistrationBean() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(); filterRegistrationBean.setFilter(new XSSFilter()); filterRegistrationBean.setOrder(1); filterRegistrationBean.setEnabled(true); filterRegistrationBean.addUrlPatterns(&quot;/*&quot;); Map&lt;String, String&gt; initParameters = Maps.newHashMap(); initParameters.put(&quot;excludes&quot;, &quot;/favicon.ico,/img/*,/js/*,/css/*&quot;); initParameters.put(&quot;isIncludeRichText&quot;, &quot;true&quot;); filterRegistrationBean.setInitParameters(initParameters); return filterRegistrationBean; &#125;&#125;]]></content>
      <tags>
        <tag>渗透测试</tag>
        <tag>sql注入</tag>
        <tag>xxs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加密算法]]></title>
    <url>%2F2018%2F03%2F06%2Fencrypt%2F</url>
    <content type="text"><![CDATA[加密算法单向加密对称密钥加密非对称密钥加密]]></content>
      <tags>
        <tag>加密算法</tag>
        <tag>单向加密</tag>
        <tag>对称密钥加密</tag>
        <tag>非对称密钥加密</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webSocket]]></title>
    <url>%2F2018%2F03%2F06%2FwebSocket%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[单点登录-Single Sign On]]></title>
    <url>%2F2018%2F03%2F05%2Fsso%2F</url>
    <content type="text"><![CDATA[概述最近在]]></content>
      <tags>
        <tag>sso</tag>
        <tag>单点登录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知识整理]]></title>
    <url>%2F2018%2F03%2F01%2FpostName%2F</url>
    <content type="text"><![CDATA[概述最近觉得有必要把过往的学习体系整理一番，以便自我省视和后续进阶，随便弄个博客写写东西 技术java 基础知识 进阶 jvm调优 jvm语言 groovy scala golangpython系列框架 mybatis hibernate spring springMvc springBoot springCloud docker &amp;&amp; k8s架构 微服务 springCloud系列 &#x1F449; here 单点登录 中间件 redis(redis cluster) activeMQ kafka zookeeper liquibase 运维 监控 Prometheus Grafana 日志收集 Fluentd + Elasticsearch + Kibana 持续交付工具链 maven + gitlab + jenkins maven + gitlab + harbor + openshift 业务融资租赁电商商业地产]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>springCloud</tag>
        <tag>docker</tag>
        <tag>k8s</tag>
        <tag>redis(redis cluster)</tag>
        <tag>activeMQ</tag>
        <tag>kafka</tag>
        <tag>zookeeper</tag>
        <tag>liquibase</tag>
        <tag>运维</tag>
        <tag>Prometheus</tag>
        <tag>Grafana</tag>
        <tag>maven</tag>
        <tag>gitlab</tag>
        <tag>jenkins</tag>
        <tag>harbor</tag>
        <tag>openshift</tag>
      </tags>
  </entry>
</search>
